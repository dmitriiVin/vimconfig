" === –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
function! s:echo_info(msg)
    echohl Directory | echom a:msg | echohl None
endfunction

function! s:echo_success(msg)
    echohl Question | echom a:msg | echohl None
endfunction

function! s:echo_warn(msg)
    echohl WarningMsg | echom a:msg | echohl None
endfunction

function! s:echo_error(msg)
    echohl ErrorMsg | echom a:msg | echohl None
endfunction

" === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CMake (F6) ===
function! CMakeGenerateFixed()
    let cmake_file = expand('%:p')
    if fnamemodify(cmake_file, ':t') !=# 'CMakeLists.txt'
        call s:echo_warn("‚ö†Ô∏è  –í—ã–±–µ—Ä–∏ CMakeLists.txt")
        return
    endif

    let cmake_dir = fnamemodify(cmake_file, ':h')
    let build_dir = cmake_dir . '/' . g:cmake_build_type

    if !isdirectory(build_dir)
        call system('mkdir -p ' . fnameescape(build_dir))
    endif

    let cmd = 'cd ' . fnameescape(build_dir) . ' && cmake -DCMAKE_BUILD_TYPE=' . g:cmake_build_type . ' ..'
    call s:echo_info("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (" . g:cmake_build_type . ")...")
    let result = system(cmd)
    echom result

    if v:shell_error == 0
        call s:echo_success("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ‚Üí " . build_dir)
    else
        call s:echo_error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ " . build_dir)
    endif
endfunction

" === –°–±–æ—Ä–∫–∞ (F7) ===
function! CMakeBuildFixed()
    let cmake_file = expand('%:p')
    if fnamemodify(cmake_file, ':t') !=# 'CMakeLists.txt'
        call s:echo_warn("‚ö†Ô∏è  –í—ã–±–µ—Ä–∏ CMakeLists.txt")
        return
    endif

    let cmake_dir = fnamemodify(cmake_file, ':h')
    let build_dir = cmake_dir . '/' . g:cmake_build_type

    if !isdirectory(build_dir)
        call s:echo_warn("‚ö†Ô∏è  –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (F6)")
        return
    endif

    let cmd = 'cd ' . fnameescape(build_dir) . ' && make -j4'
    call s:echo_info("‚öôÔ∏è  –°–±–æ—Ä–∫–∞ (" . g:cmake_build_type . ")...")
    let result = system(cmd)
    echom result

    if v:shell_error == 0
        call s:echo_success("‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞ –≤ " . build_dir)
    else
        call s:echo_error("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
    endif
endfunction

" === –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (F8) ===
function! CMakeSelectTargetInteractive()
    let cmake_file = expand('%:p')
    if fnamemodify(cmake_file, ':t') !=# 'CMakeLists.txt'
        call s:echo_warn("‚ö†Ô∏è  –í—ã–±–µ—Ä–∏ CMakeLists.txt")
        return
    endif

    let cmake_dir = fnamemodify(cmake_file, ':h')
    let build_dir = cmake_dir . '/' . g:cmake_build_type

    if !isdirectory(build_dir)
        call s:echo_warn("‚ö†Ô∏è  –ù–µ—Ç –ø–∞–ø–∫–∏ " . build_dir . ". –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–µ–∫—Ç (F6).")
        return
    endif

    " –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    let all_executables = systemlist('find ' . fnameescape(build_dir) . ' -type f -executable ! -type d 2>/dev/null')
    call filter(all_executables, 'v:val !~# "CMakeFiles"')

    if empty(all_executables)
        call s:echo_error("‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ " . build_dir)
        return
    endif

    echo "–í—ã–±–µ—Ä–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª:"
    let i = 1
    for exe in all_executables
        echo i . '. ' . exe
        let i += 1
    endfor

    let choice = input('–ù–æ–º–µ—Ä: ')
    if choice =~ '^\d\+$' && choice >= 1 && choice <= len(all_executables)
        let g:cmake_selected_target = all_executables[choice - 1]
        call s:echo_success("‚úÖ –í—ã–±—Ä–∞–Ω: " . g:cmake_selected_target)
    else
        call s:echo_warn("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    endif
endfunction

" === –ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞ (F9) ===
function! CMakeRunFixed()
    if empty(g:cmake_selected_target)
        let cmake_file = expand('%:p')
        if fnamemodify(cmake_file, ':t') !=# 'CMakeLists.txt'
            call s:echo_warn("‚ö†Ô∏è  –í—ã–±–µ—Ä–∏ CMakeLists.txt")
            return
        endif

        let cmake_dir = fnamemodify(cmake_file, ':h')
        let build_dir = cmake_dir . '/' . g:cmake_build_type

        let auto_exe = systemlist('find ' . fnameescape(build_dir) . ' -type f -executable ! -type d 2>/dev/null | grep -v CMakeFiles | head -1')
        if !empty(auto_exe)
            let g:cmake_selected_target = auto_exe[0]
            call s:echo_info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω: " . g:cmake_selected_target)
        else
            call s:echo_warn("‚ö†Ô∏è  –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (—Å–Ω–∞—á–∞–ª–∞ F8 –∏–ª–∏ —Å–±–æ—Ä–∫–∞)")
            return
        endif
    endif

    if !filereadable(g:cmake_selected_target)
        call s:echo_error("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " . g:cmake_selected_target)
        return
    endif

    let exe_dir = fnamemodify(g:cmake_selected_target, ':h')
    let exe_name = fnamemodify(g:cmake_selected_target, ':t')

    call s:echo_info("üöÄ –ó–∞–ø—É—Å–∫: " . exe_name . " (" . g:cmake_build_type . ")")
    execute '!cd ' . fnameescape(exe_dir) . ' && ./' . fnameescape(exe_name)
endfunction

" === –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ —Å–±–æ—Ä–∫–∏ (F10) ===
function! CMakeToggleBuildType()
    if g:cmake_build_type ==# 'Debug'
        let g:cmake_build_type = 'Release'
    else
        let g:cmake_build_type = 'Debug'
    endif
    call s:echo_info("üîÅ –†–µ–∂–∏–º —Å–±–æ—Ä–∫–∏: " . g:cmake_build_type)
endfunction

" F12 - –°–æ–∑–¥–∞–Ω–∏–µ/–æ—Ç–∫—Ä—ã—Ç–∏–µ CMakeLists.txt –≤ –ø–∞–ø–∫–µ NERDTree –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è NERDTree
function! CreateCMakeListsInNERDTree()
    if &filetype == 'nerdtree'
        " –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —É–∑–ª—É NERDTree
        let current_path = g:NERDTreeFileNode.GetSelected().path.str()
        if empty(current_path)
            echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å"
            return
        endif
        
        " –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if isdirectory(current_path)
            let target_dir = current_path
        else
            let target_dir = fnamemodify(current_path, ':h')
        endif
        
        let cmake_file = target_dir . '/CMakeLists.txt'
        
        " –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if !filereadable(cmake_file)
            " –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            let basic_content = [
                \ 'cmake_minimum_required(VERSION 3.10)',
                \ '',
                \ '# –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
                \ 'project(MyProject)',
                \ '',
                \ '# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ C++',
                \ 'set(CMAKE_CXX_STANDARD 17)',
                \ 'set(CMAKE_CXX_STANDARD_REQUIRED ON)',
                \ '',
                \ '# –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–¥–µ—Å—å',
                \ '# add_executable(${PROJECT_NAME} main.cpp)'
                \ ]
            call writefile(basic_content, cmake_file)
            echo "–°–æ–∑–¥–∞–Ω CMakeLists.txt —Å –±–∞–∑–æ–≤—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º"
        else
            echo "CMakeLists.txt —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        endif
        
        " –û–±–Ω–æ–≤–ª—è–µ–º NERDTree
        NERDTreeRefreshRoot
        
        " –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ (—Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å) –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Ñ–∞–π–ª–∞
        wincmd p  " –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –æ–∫–Ω—É
        
        " –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –≤ NERDTree, –∑–Ω–∞—á–∏—Ç –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        if &filetype == 'nerdtree'
            wincmd l  " –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∞
        endif
        
        " –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏
        execute 'edit ' . fnameescape(cmake_file)
        
    else
        echo "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ NERDTree"
    endif
endfunction

" === –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ (\ + R + U) ===
function! CMakeQuickRun()
    let cmake_file = expand('%:p')
    if fnamemodify(cmake_file, ':t') !=# 'CMakeLists.txt'
        call s:echo_warn("‚ö†Ô∏è  –í—ã–±–µ—Ä–∏ CMakeLists.txt")
        return
    endif

    let cmake_dir = fnamemodify(cmake_file, ':h')
    let build_dir = cmake_dir . '/' . g:cmake_build_type

    if !isdirectory(build_dir)
        call CMakeGenerateFixed()
    endif

    call CMakeBuildFixed()

    let auto_exe = systemlist('find ' . fnameescape(build_dir) . ' -type f -executable ! -type d 2>/dev/null | grep -v CMakeFiles | head -1')
    if !empty(auto_exe)
        let g:cmake_selected_target = auto_exe[0]
        call s:echo_info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω: " . g:cmake_selected_target)
        call CMakeRunFixed()
    else
        call s:echo_warn("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª.")
    endif
endfunction

" ==== –ü–û–ö–ê–ó–ê–¢–¨ –¢–ï–ö–ö–£–©–ò–ô –¢–ò–ü –°–ë–û–†–ö–ò ===
function! ShowCMakeBuildType()
    if exists("g:cmake_build_type")
        call s:echo_success("‚úÖ –¢–µ–∫—É—â–∏–π —Ç–∏–ø —Å–±–æ—Ä–∫–∏: " . g:cmake_build_type)
    else
        call s:echo_warn("‚ö†Ô∏è  –¢–∏–ø —Å–±–æ—Ä–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Debug)")
    endif
endfunction

