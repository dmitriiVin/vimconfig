" === –°–æ–∑–¥–∞–Ω–∏–µ/–æ—Ç–∫—Ä—ã—Ç–∏–µ CMakeLists.txt –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ NERDTree ===
function! CreateCMakeListsInNERDTree()
    if &filetype !=# 'nerdtree'
        echo "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ NERDTree"
        return
    endif

    " –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —É–∑–ª—É NERDTree
    let current_path = g:NERDTreeFileNode.GetSelected().path.str()
    if empty(current_path)
        echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å"
        return
    endif

    " –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if isdirectory(current_path)
        let target_dir = current_path
    else
        let target_dir = fnamemodify(current_path, ':h')
    endif

    " –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É CMakeLists.txt
    let cmake_file = target_dir . '/CMakeLists.txt'

    " –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
    if !filereadable(cmake_file)
        call system('touch ' . fnameescape(cmake_file))
        if v:shell_error
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: " . cmake_file
            return
        else
            echo "üíæ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: " . cmake_file
            " –û–±–Ω–æ–≤–ª—è–µ–º NERDTree
            NERDTreeRefreshRoot
        endif
    endif

    " –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–∞–±–æ—á–µ–º –æ–∫–Ω–µ (NERDTree –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º)
    if winnr('$') > 1
        wincmd p
        execute 'edit' fnameescape(cmake_file)
    else
        execute 'vsplit' fnameescape(cmake_file)
    endif
endfunction

" === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CMake –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ CMakeLists.txt ===
function! CMakeGenerateLocal()
    let cmake_file = expand('%:p')
    if fnamemodify(cmake_file, ':t') !=# 'CMakeLists.txt'
        echo "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ CMakeLists.txt –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
        return
    endif

    let cmake_dir = fnamemodify(cmake_file, ':h')
    let debug_dir = cmake_dir . '/Debug'

    if !isdirectory(debug_dir)
        call system('mkdir -p ' . fnameescape(debug_dir))
    endif

    let cmd = 'cd ' . fnameescape(debug_dir) . ' && cmake ..'
    echo "Running: " . cmd
    let result = system(cmd)
    echo result

    if v:shell_error == 0
        echo "‚úì CMake generated successfully in " . debug_dir
    else
        echo "‚úó CMake generation failed in " . debug_dir
    endif
endfunction

" === –°–±–æ—Ä–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ CMakeLists.txt ===
function! CMakeBuildLocal()
    let cmake_file = expand('%:p')
    if fnamemodify(cmake_file, ':t') !=# 'CMakeLists.txt'
        echo "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ CMakeLists.txt –¥–ª—è —Å–±–æ—Ä–∫–∏"
        return
    endif

    let cmake_dir = fnamemodify(cmake_file, ':h')
    let debug_dir = cmake_dir . '/Debug'

    if !isdirectory(debug_dir)
        echo "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ CMakeGenerateLocal()"
        return
    endif

    let cmd = 'cd ' . fnameescape(debug_dir) . ' && make -j4'
    echo "Running: " . cmd
    let result = system(cmd)
    echo result

    if v:shell_error == 0
        echo "‚úì Build successful in " . debug_dir
    else
        echo "‚úó Build failed in " . debug_dir
    endif
endfunction

" --- –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (F8) ---
function! CMakeSelectTargetInteractive()
    if !isdirectory('Debug')
        echo "‚ö†Ô∏è –ù–µ—Ç –ø–∞–ø–∫–∏ Debug. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ CMakeGenerate (F6)."
        return
    endif

    " –ò—â–µ–º –≤—Å–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã
    let all_executables = systemlist('find Debug -type f -perm +111 2>/dev/null')
    call filter(all_executables, 'v:val !~# "CMakeFiles"')

    if empty(all_executables)
        echo "‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        return
    endif

    echo "–í—ã–±–µ—Ä–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª:"
    let i = 1
    for exe in all_executables
        echo i . '. ' . exe
        let i += 1
    endfor

    let choice = input('–ù–æ–º–µ—Ä: ')
    if choice =~ '^\d\+$' && choice >= 1 && choice <= len(all_executables)
        let g:cmake_selected_target = all_executables[choice - 1]
        echo "‚úÖ –í—ã–±—Ä–∞–Ω: " . g:cmake_selected_target
    else
        echo "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä."
    endif
endfunction

" --- –ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞ (F9) ---
function! CMakeRunFixed()
    if empty(g:cmake_selected_target)
        echo "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª (F8)."
        return
    endif

    if !filereadable(g:cmake_selected_target)
        echo "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " . g:cmake_selected_target
        return
    endif

    let exe = g:cmake_selected_target
    echo "üöÄ –ó–∞–ø—É—Å–∫: " . exe
    execute '!./' . exe
endfunction

" --- –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ (Shift+F8): –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å + –±–∏–ª–¥ + –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ ---
function! CMakeQuickRun()
    if !isdirectory('Debug')
        call CMakeGenerateFixed()
    endif

    call CMakeBuildFixed()

    let auto_exe = systemlist('find Debug -type f -perm +111 2>/dev/null | grep -v CMakeFiles | head -1')
    if !empty(auto_exe)
        let g:cmake_selected_target = auto_exe[0]
        echo "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω: " . g:cmake_selected_target
        call CMakeRunFixed()
    else
        echo "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª."
    endif
endfunction
